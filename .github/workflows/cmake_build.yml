#
# CMake based build for Audacity
#
name: CMake Build

#
# Global environment variables
#
env:
  WXURL: https://github.com/audacity/wxWidgets
  WXWIN: ${{ github.workspace }}/wxwin

#
# Define our job(s)
#
jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows_64bit",
            os: windows-latest,
            generator: "Visual Studio 16 2019",
            platform: "x64"
          }

    steps:
    # =========================================================================
    # SHARED: Checkout source
    # =========================================================================
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: master

    # =========================================================================
    # SHARED: Retrieve git hashes and set up for cache
    # =========================================================================
    - name: Setup cache
      shell: bash
      run: |
        set -x

        # Get latest wxWidgets commit hash
        wxhash=$(git ls-remote ${WXURL} HEAD | awk 'NR==1 {print $1}')

        # Build the cache key
        wxhash="wx_${wxhash}_${RUNNER_OS}_${{matrix.config.platform}}"

        # Export the commit hash to further steps
        echo "::set-env name=WXHASH::${wxhash}"

        # Get the short hash
        shorthash=$(git show -s --format='%h')

        # Export the short hash for the upload step
        echo "::set-env name=SHORTHASH::${shorthash}"

        # Export the destination directory name
        echo "::set-env name=DEST::${{matrix.config.name}}_${shorthash}"

    # =========================================================================
    # SHARED: Create and/or retrieve wxWidgets cached build
    # =========================================================================
    - name: Populate cache
      id: cache
      uses: actions/cache@v1
      with:
        # Increment the number at the end to force recreation of the cache
        key: ${{ env.WXHASH }}.8
        path: ${{ env.WXWIN }}

    # =========================================================================
    # WINDOWS: Build (for all versions of Windows)
    # =========================================================================
    - name: Build for Windows
      if: startswith( matrix.config.os, 'windows' )
      shell: bash
      run: |
        set -x

        # Build wxWidgets if needed
        if [ ! -e "${WXWIN}" ]
        then
          # Clone the wxWidgets repo
          git clone --depth 1 --recurse-submodules "${WXURL}" "wxroot"

          # Use cmake since it defines the MSVC enviornment for us
          cmake -S "wxroot" \
                -B "wxroot" \
                -G "${{matrix.config.generator}}" \
                -A "${{matrix.config.platform}}"

          # Build
          cmake --build "wxroot" --config Release --verbose

          # Install to the cached path
          cmake --install "wxroot" --config Release --prefix "${WXWIN}"

          # On Windows, we need zlib for libid3tag
          mkdir -p "${WXWIN}/src"
          cp -a "wxroot/lib" "${WXWIN}/"
          cp -a "wxroot/src/zlib" "${WXWIN}/src"
        fi

        # Convert to CMake path
        export WXWIN="${WXWIN//\\//}"

        # Configure Audacity
        #
        # The wxWidgets_USE_REL_AND_DBG is needed because,
        # on Github, we only build the Release version of
        # wxWidgets and the FindwxWidgets CMake module
        # defaults to looking for both.  If either of them
        # isn't found, then it doesn't provides the required
        # library information.  This is only a concern for
        # Windows.
        cmake -S . \
              -B build \
              -G "${{matrix.config.generator}}" \
              -A ${{matrix.config.platform}} \
              -D wxWidgets_USE_REL_AND_DBG=NO

        # Build Audacity
        cmake --build build --config Release --verbose

        # "Install" Audacity
        mkdir -p "${DEST}"
        cp -a build/bin/Release/* "${DEST}"
        rm -f "${DEST}"/{*.iobj,*.ipdb}

        # Create artifact (zipped as Github actions don't preserve permissions)
        cmake -E tar c "${GITHUB_SHA}.zip" --format=zip "${DEST}"

    # =========================================================================
    # SHARED: Attach the artifact to the workflow results
    # =========================================================================
    - name: Upload artifact
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.config.name }}_${{ env.SHORTHASH }}
        path: ${{ github.sha }}.zip

